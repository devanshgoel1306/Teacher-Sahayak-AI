{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/design-visual-aids-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A visual aid generation AI agent.\n *\n * - designVisualAid - A function that handles the visual aid generation process.\n * - DesignVisualAidInput - The input type for the designVisualAid function.\n * - DesignVisualAidOutput - The return type for the designVisualAid function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DesignVisualAidInputSchema = z.object({\n  description: z.string().describe('The description of the visual aid.'),\n  gradeLevel: z.string().optional().describe('The target grade level.'),\n});\nexport type DesignVisualAidInput = z.infer<typeof DesignVisualAidInputSchema>;\n\nconst TableContentSchema = z.object({\n  headers: z.array(z.string()).describe('The headers for the table columns.'),\n  rows: z.array(z.array(z.string())).describe('The rows of the table, where each inner array represents a row.'),\n  caption: z.string().optional().describe('A brief description of the table.'),\n});\n\nconst DesignVisualAidOutputSchema = z.object({\n  visualAid: z.union([\n    z.object({\n      type: z.literal('image'),\n      data: z.string().describe(\"A url of the image generated. It will be a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n    }),\n    z.object({\n      type: z.literal('table'),\n      data: TableContentSchema,\n    }),\n    z.object({\n      type: z.literal('text'),\n      data: z.string().describe('A simple text explanation or list.'),\n    }),\n  ]),\n});\nexport type DesignVisualAidOutput = z.infer<typeof DesignVisualAidOutputSchema>;\n\nexport async function designVisualAid(input: DesignVisualAidInput): Promise<DesignVisualAidOutput> {\n  return designVisualAidFlow(input);\n}\n\nconst chooseFormatPrompt = ai.definePrompt({\n    name: 'chooseVisualAidFormatPrompt',\n    input: { schema: DesignVisualAidInputSchema },\n    output: { schema: z.object({\n        format: z.enum(['image', 'table', 'text']),\n        reasoning: z.string(),\n        imagePrompt: z.string().optional().describe(\"If format is 'image', a concise prompt for an image generation model to create a simple, black-and-white line drawing that is easy to replicate on a blackboard.\"),\n    })},\n    prompt: `You are an AI assistant that determines the best visual aid format for a teacher's request.\n\nAnalyze the user's description to determine the best format for the visual aid.\n- If the request is for a drawing, a visual representation of a concept (like 'water cycle'), or something that is inherently visual, choose 'image'. Then, create a new, concise prompt in the 'imagePrompt' field to generate a simple, black-and-white line drawing that is easy to replicate on a blackboard.\n- If the request is for a comparison, a list of properties, or data that fits a structured format (like 'compare solids, liquids, and gases'), choose 'table'.\n- For anything else, provide a simple text explanation and choose 'text'.\n\nUser Request:\nDescription: {{{description}}}\nGrade Level: {{{gradeLevel}}}\n\nRespond with the chosen format and reasoning.\n`,\n});\n\nconst generateTablePrompt = ai.definePrompt({\n    name: 'generateTablePrompt',\n    input: { schema: DesignVisualAidInputSchema },\n    output: { schema: TableContentSchema },\n    prompt: `You are an AI assistant that generates simple tables for teachers. Create a table for the following request:\nDescription: {{{description}}}\nGrade Level: {{{gradeLevel}}}\n`,\n});\n\nconst generateTextPrompt = ai.definePrompt({\n    name: 'generateTextPrompt',\n    input: { schema: DesignVisualAidInputSchema },\n    output: { schema: z.string() },\n    prompt: `You are an AI assistant that generates simple text explanations for teachers. Create a simple text explanation for the following request:\nDescription: {{{description}}}\nGrade Level: {{{gradeLevel}}}\n`,\n});\n\n\nconst designVisualAidFlow = ai.defineFlow(\n  {\n    name: 'designVisualAidFlow',\n    inputSchema: DesignVisualAidInputSchema,\n    outputSchema: DesignVisualAidOutputSchema,\n  },\n  async input => {\n    // Step 1: Decide the format\n    const { output: formatChoice } = await chooseFormatPrompt(input);\n    if (!formatChoice) {\n        throw new Error(\"Could not decide on a visual aid format.\");\n    }\n\n    // Step 2: Generate content based on the chosen format\n    switch (formatChoice.format) {\n        case 'image':\n            if (!formatChoice.imagePrompt) {\n                throw new Error(\"Image format was chosen, but no image prompt was generated.\");\n            }\n            const { media } = await ai.generate({\n                model: 'googleai/gemini-2.0-flash-preview-image-generation',\n                prompt: formatChoice.imagePrompt,\n                config: {\n                    responseModalities: ['TEXT', 'IMAGE'],\n                },\n            });\n\n            if (!media?.url) {\n                // Fallback if image generation fails\n                return { visualAid: { type: 'text', data: \"Sorry, I couldn't generate the image. Please try again.\" }};\n            }\n            return { visualAid: { type: 'image', data: media.url } };\n\n        case 'table':\n            const { output: tableData } = await generateTablePrompt(input);\n             if (!tableData) {\n                throw new Error(\"Failed to generate table data.\");\n            }\n            return { visualAid: { type: 'table', data: tableData } };\n\n        case 'text':\n            const { output: textData } = await generateTextPrompt(input);\n            if (!textData) {\n                throw new Error(\"Failed to generate text data.\");\n            }\n            return { visualAid: { type: 'text', data: textData } };\n\n        default:\n             return { visualAid: { type: 'text', data: \"Sorry, I could not generate the visual aid. Please try a different description.\" }};\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/visual-aids/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { designVisualAid } from \"@/ai/flows/design-visual-aids-flow\";\nimport type { DesignVisualAidOutput } from \"@/ai/flows/design-visual-aids-flow\";\nimport { z } from \"zod\";\n\nconst visualAidSchema = z.object({\n  description: z.string(),\n  gradeLevel: z.string().optional(),\n});\n\nexport async function generateVisualAidAction(input: z.infer<typeof visualAidSchema>): Promise<DesignVisualAidOutput | { visualAid: null }> {\n  const validatedInput = visualAidSchema.parse(input);\n  try {\n    const result = await designVisualAid(validatedInput);\n    return result;\n  } catch (error) {\n    console.error(\"Error generating visual aid:\", error);\n    return { visualAid: null };\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;AAEA;;;;;;AAEA,MAAM,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;IACrB,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AACjC;AAEO,eAAe,wBAAwB,KAAsC;IAClF,MAAM,iBAAiB,gBAAgB,KAAK,CAAC;IAC7C,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,sJAAA,CAAA,kBAAe,AAAD,EAAE;QACrC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YAAE,WAAW;QAAK;IAC3B;AACF;;;IATsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/visual-aids/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateVisualAidAction as '401167098de9797e6639e07f305ce6fa7b49273504'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/visual-aids/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/visual-aids/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/visual-aids/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/visual-aids/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/visual-aids/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/visual-aids/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}